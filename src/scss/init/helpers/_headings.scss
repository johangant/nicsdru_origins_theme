// headings([$from], [$to])
//
// Simple helper function to loop through headings h1, h2, h3, h4, h5, h6
// The function provides an easy way to apply styles to all of the 6 standardised HTML headings (h1,h2,h3,h4,h5,h6).
// The mixin helps effectively chop and change styling's for heading tags and save recursively writing the tags. At its
// default state it will output all h1 to h6 tags, but is useful to apply rules to a given range of headings. You would
// do this by calling the function: #{headings()} with the number range you need so for the example, if you wanted to
// apply styling to your h2, h3, and h4â€™s you would simply run: `#{headings(2,4)} {...}`
//
// @see <https://guwii.com/bytes/sass-function-loop-headings-h1h2h3h4h5h6/>
//
// $from - Optional: heading value to start from, by default is set to 1
// $to - Optional: heading value to which to continue the loop until, by default is set to 6
//
// Style guide: init.functions.headings
@function headings($_from: 1, $_to: 6) {
  @if(_headings-valid-input($_from)) != true {
    @error 'Variables passed to headings function must be numbers between 1 - 6';
  }
  @if(_headings-valid-input($_to)) != true {
    @error 'Variables passed to headings function must be numbers between 1 - 6';
  }
  @if(_headings-validate-value-order($_from, $_to)) != true {
    @error 'The $from value should be smaller than or equal to the $to value in headings function';
  }
  @if $_from == $_to {
    @return 'h#{$_from}';
  }
  @else {
    @return 'h#{$_from},' + headings($_from+1, $_to);
  }
}

// headers([$from], [$to])
//
// Alias of headings().
//
// Style guide: init.functions.headers
@function headers($_from: 1, $_to: 6) {
  @return headings($_from, $_to);
}

// Private function to check for legitimate heading number.
@function _headings-valid-input($_val) {
  @return type-of($_val) == 'number' and unitless($_val) and $_val >= 1 and $_val <= 6;
}

// Private function to check that the first value is smaller than the second.
@function _headings-validate-value-order($_val-1, $_val-2) {
  @return $_val-2 >= $_val-1;
}
