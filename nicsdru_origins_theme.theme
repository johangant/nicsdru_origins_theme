<?php

/**
 * @file
 * Functions to support theming in the nicsdru_origins_theme theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_preprocess().
 */
function nicsdru_origins_theme_preprocess(&$variables, $hook) {
  // Set a variable based on the path.matcher.
  if (!isset($variables['is_front'])) {
    try {
      $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
    }
    catch (\Exception $e) {
      $variables['is_front'] = FALSE;
    }
  }

  // Ensure the cache varies correctly.
  $variables['#cache']['contexts'][] = 'url.path.is_front';
}

/**
 * Implements hook_page_attachments_alter().
 */
function nicsdru_origins_theme_page_attachments_alter(array &$page) {
  /*
   * Tell IE to use latest rendering engine (not to use compatibility mode).
   * /*$ie_edge = [
   *   '#type' => 'html_tag',
   *   '#tag' => 'meta',
   *   '#attributes' => [
   *   'http-equiv' => 'X-UA-Compatible',
   *   'content' => 'IE=edge',
   *   ],
   * ];
   * $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];
   */

  // Attach our drupal components library for authenticated users.
  $userCurrent = \Drupal::currentUser();

  if ($userCurrent->isAuthenticated()) {
    $page['#attached']['library'][] = 'nicsdru_origins_theme/authenticated-styles';
  }

  // Remove the stock Drupal favicon if it is present.
  if (isset($page['#attached']['html_head_link'])) {
    foreach ($page['#attached']['html_head_link'] as $key => $config) {
      if (isset($config[0]['rel']) && $config[0]['rel'] === 'shortcut icon') {
        unset($page['#attached']['html_head_link'][$key]);
      }
    }
  }

  return $page;
}

/**
 * Implements hook_preprocess_page() for page.html.twig.
 */
function nicsdru_origins_theme_preprocess_page(array &$variables) {
  // Set some render attributes for various regions on the page.html.twig
  // we can hook into these to add additional classes for layout in sub theming.
  $variables['main_content_attr'] = [
    'class' => ['container'],
    'id' => ['main-content']
  ];
  $variables['sidebar_first_attr'] = [
    'class' => ['layout-sidebar-first'],
    'id' => ['first_sidebar']
  ];
  $variables['sidebar_second_attr'] = [
    'class' => ['layout-sidebar-second'],
    'id' => ['second_sidebar']
  ];

  // Declare region attributes.
  $variables['main_content_attr'] = new Attribute($variables['main_content_attr']);
  $variables['sidebar_first_attr'] = new Attribute($variables['sidebar_first_attr']);
  $variables['sidebar_second_attr'] = new Attribute($variables['sidebar_second_attr']);

  // Social links for footer.
  if (empty($variables['page']['footer'])) {
    // Set some key variables for correct template mapping if something else hasn't already, eg: a block.
    $variables['page']['footer']['#region'] = 'footer';
    $variables['page']['footer']['#theme_wrappers'][] = 'region';
  }
}

/**
 * Implements hook_preprocess_pager().
 */
function nicsdru_origins_theme_preprocess_pager(&$variables) {
  if (empty($variables['items'])) {
    return;
  }

  // Lowercase all text controls.
  foreach ($variables['items'] as $key => &$item) {
    if (array_key_exists('text', $item) && is_numeric($item['text']) == FALSE) {
      $item['text'] = strtolower($item['text']);
    }
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function nicsdru_origins_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_theme_suggestions_node_alter().
 */
function nicsdru_origins_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_preprocess_block().
 */
function nicsdru_origins_theme_preprocess_block(array &$variables) {
  // Include social links as part of main/footer menu blocks to ease the process
  // of wrapping menu + links elements in a parent element to set a max width on.
  if (preg_match('/^system_menu_block\:(main|footer)$/', $variables['plugin_id'])) {
    $social_links = _nicsdru_origins_social_links();

    if (!empty($social_links)) {
      $variables['social_links'] = $social_links;
    }
  }
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function nicsdru_origins_theme_theme_suggestions_field_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_theme_suggestions_field_alter().
 */
function nicsdru_origins_theme_theme_suggestions_fieldset_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_preprocess_node().
 */
function nicsdru_origins_theme_preprocess_node(array &$variables) {
}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function nicsdru_origins_theme_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_preprocess_views_view().
 */
function nicsdru_origins_theme_preprocess_views_view(&$variables) {
  $variables['attributes']['role'] = 'presentation';

  if ($variables['id'] === 'search') {
    $variables['exposed']['#attributes']['class'][] = Html::cleanCssIdentifier('search-form');
    $variables['exposed']['#attributes']['class'][] = Html::cleanCssIdentifier('search-form--site');
    // If a label for the search input is not defined in the view, set default label text.
    $search_label =& $variables['exposed']['#info']['filter-search_api_fulltext']['label'];
    if (isset($search_label) && empty($search_label)) {
      $search_label = t("Search this site");
    }
    // The label should be visually hidden.
    $variables['exposed']['query']['#title_display'] = 'invisible';
  }
}

/**
 * Implements template_preprocess_input().
 */
function nicsdru_origins_theme_preprocess_input(&$variables) {
  // Set up configurable autocomplete message.
  $type_html = $variables['attributes']['type'];
  $text_types_html = [
    'text',
    'email',
    'tel',
    'number',
    'search',
    'password',
    'date',
    'time',
    'file',
    'color',
    'datetime-local',
    'url',
    'month',
    'week',
  ];

  if (in_array($type_html, $text_types_html) && !empty($variables['element']['#autocomplete_route_name'])) {
    $variables['autocomplete_message'] = t('Checkingâ€¦');
  }
  // Set the type attribute to 'search' for search form input elements.
  if ($variables['element']['#type'] == 'search_api_autocomplete') {
    $variables['element']['#attributes']['type'] = 'search';
    $variables['attributes']['type'] = 'search';
  }
}

/**
 * Implements hook_preprocess_form().
 */
function nicsdru_origins_theme_preprocess_form(array &$variables) {
}

/**
 * Implements hook_preprocess_select().
 */
function nicsdru_origins_theme_preprocess_select(array &$variables) {
}

/**
 * Implements hook_preprocess_field().
 */
function nicsdru_origins_theme_preprocess_field(array &$variables, $hook) {
}

/**
 * Implements hook_preprocess_details().
 */
function nicsdru_origins_theme_preprocess_details(array &$variables) {
}

/**
 * Implements hook_theme_suggestions_details_alter().
 */
function nicsdru_origins_theme_theme_suggestions_details_alter(array &$suggestions, array $variables) {
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function nicsdru_origins_theme_preprocess_menu_local_task(array &$variables) {
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nicsdru_origins_theme_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter login form to add out admin theming components.
  $form['#attached']['library'][] = 'nicsdru_origins_theme/authenticated-styles';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nicsdru_origins_theme_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id = NULL) {
  $form['#attached']['library'][] = 'nicsdru_origins_theme/authenticated-styles';
}

/**
 * Implements hook_preprocess_facets_item_list().
 */
function nicsdru_origins_theme_preprocess_facets_item_list(array &$variables) {
  if (!empty($variables["facet"]->getWidget()) && $variables["facet"]->getWidget()["type"] == 'links') {
    foreach ($variables["items"] as $key => $item) {
      if (array_key_exists('class', $item["value"]["#attributes"])) {
        $variables["items"][$key]["value"]["#attributes"]["class"][] = 'facet-item--link';
      }
      else {
        $variables["items"][$key]["value"]["#attributes"]["class"] = ['facet-item--link'];
      }
    }
  }
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function nicsdru_origins_theme_form_system_theme_settings_alter(&$form, FormStateInterface &$form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  // Add a theme settings group to gather social media link URLs.
  $form['social_links'] = [
    '#type' => 'details',
    '#title' => t('Social media links'),
    '#open' => TRUE,
    '#description' => t('Add social media platform details here.'),
  ];
  $form['social_links']['social_links_twitter'] = [
    '#type'          => 'textfield',
    '#title'         => t('Twitter'),
    '#default_value' => theme_get_setting('social_links_twitter'),
    '#placeholder' => 'Enter a URL, such as https://twitter.com/yourorg',
  ];
  $form['social_links']['social_links_facebook'] = [
    '#type'          => 'textfield',
    '#title'         => t('Facebook'),
    '#default_value' => theme_get_setting('social_links_facebook'),
    '#placeholder' => 'Enter a URL, such as https://facebook.com/yourorg',
  ];
  $form['social_links']['social_links_youtube'] = [
    '#type'          => 'textfield',
    '#title'         => t('YouTube'),
    '#default_value' => theme_get_setting('social_links_youtube'),
    '#placeholder' => 'Enter a URL, such as https://youtube.com/yourorg',
  ];
  $form['social_links']['social_links_rss'] = [
    '#type'          => 'textfield',
    '#title'         => t('RSS'),
    '#default_value' => theme_get_setting('social_links_rss'),
    '#placeholder' => 'Enter a URL, such as https://example.com/rss.xml',
  ];
}

/**
 * Utility function to return theme config as array of Link elements.
 *
 * @return array
 *   List of social media provider links.
 */
function _nicsdru_origins_social_links() {
  $platforms = [
    'twitter' => t('Twitter'),
    'facebook' => t('Facebook'),
    'youtube' => t('YouTube'),
    'rss' => t('RSS'),
  ];
  $social_links = [];

  // Fetch links from the theme settings and use as part of render elements.
  foreach ($platforms as $id => $label) {
    $platform_url = theme_get_setting("social_links_$id", 'nicsdru_origins_theme');

    if (empty($platform_url)) {
      // Skip any blank values.
      continue;
    }

    // Check for any internal paths.
    if (preg_match('/^http/', $platform_url) == FALSE) {
      // Strip leading / if present.
      $platform_url = ltrim($platform_url, '/');
      $platform_url = 'internal:/' . $platform_url;
    }

    $social_links[$id] = Link::fromTextAndUrl($label,
      Url::fromUri($platform_url, [
        'attributes' => ['title' => $label]
      ]))->toRenderable();
  }

  return $social_links;
}
